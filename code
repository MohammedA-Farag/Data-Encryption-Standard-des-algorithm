/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desalgorithm;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;

/**
 *
 * @author lenovo
 */
public class GUIDesign extends javax.swing.JFrame {

    /**
     * Creates new form GUIDesign
     */
    public GUIDesign() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        keywordfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        clearbtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        cipherBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        plaintext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        enciphertext = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        encipherbtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ciphertext = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        keywordfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordfieldActionPerformed(evt);
            }
        });

        jLabel2.setText("key");

        clearbtn.setText("clear");
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DES Algorithm", "ceaser cipher", "play fair" }));

        cipherBtn.setText("encrypt");
        cipherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherBtnActionPerformed(evt);
            }
        });

        plaintext.setColumns(20);
        plaintext.setRows(5);
        jScrollPane1.setViewportView(plaintext);

        enciphertext.setColumns(20);
        enciphertext.setRows(5);
        jScrollPane2.setViewportView(enciphertext);

        jLabel1.setText("security technique ");

        encipherbtn.setText("decrypt");
        encipherbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encipherbtnActionPerformed(evt);
            }
        });

        ciphertext.setColumns(20);
        ciphertext.setRows(5);
        jScrollPane3.setViewportView(ciphertext);

        jLabel3.setText("message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(keywordfield)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(encipherbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cipherBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(clearbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(296, 296, 296))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(keywordfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cipherBtn)
                        .addGap(11, 11, 11)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(encipherbtn)
                        .addGap(34, 34, 34)))
                .addComponent(clearbtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        plaintext.setText("");
        enciphertext.setText("");
        keywordfield.setText("");
        ciphertext.setText("");
    }                                        

    private void cipherBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        DES des = new DES();
        String text = plaintext.getText();
        des.generatekey(des.utfToBin(keywordfield.getText()));
        //des.cipher = "";
        String result = des.cipher(text);
        
        ciphertext.append(result + "\n");    
    }                                         

    private void encipherbtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        DES des1 = new DES();
        des1.generatekey( des1.utfToBin(keywordfield.getText()));
        String cipher = ciphertext.getText();
        //des1.text = "";
        String res = des1.encipher(cipher);
        
        enciphertext.append(res + "\n");
    }                                           

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {                                    
        // TODO add your handling code here:
    }                                   

    private void keywordfieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        
        java.awt.EventQueue.invokeLater(() -> {
            new GUIDesign().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton cipherBtn;
    private javax.swing.JTextArea ciphertext;
    private javax.swing.JButton clearbtn;
    private javax.swing.JButton encipherbtn;
    private javax.swing.JTextArea enciphertext;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField keywordfield;
    private javax.swing.JTextArea plaintext;
    // End of variables declaration                   
}

 class DES {

    /**
     * @param args the command line arguments
     */
    
    public static ArrayList<String>subkeys = new ArrayList<String>();
    String key ;
    public static int KEY_LENGTH = 64;
    private String left;
    private String right;
	  
    private static final byte[] PC1Keyto56 = 
	{  
	57, 49, 41, 33, 25, 17,  9,
         1, 58, 50, 42, 34, 26, 18,
        10,  2, 59, 51, 43, 35, 27,
        19, 11,  3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
         7, 62, 54, 46, 38, 30, 22,
        14,  6, 61, 53, 45, 37, 29,
        21, 13,  5, 28, 20, 12,  4
	};
	
	// First index is garbage value, loops operating on this should start with index = 1
	private static final byte[] KEY_SHIFTS = 
	{
		0,  1,  1,  2,  2,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  2,  1
	};
	
	private static final byte[] PC2Keyto48 =  //compression D-box changes keys from 58 -> 48bits   
	{
	14, 17, 11, 24,  1,  5,
         3, 28, 15,  6, 21, 10,
        23, 19, 12,  4, 26,  8,
        16,  7, 27, 20, 13,  2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32
	};
	
	
	private static final byte[][] s1 = {
		{14, 4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
		{0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11,  9,  5,  3,  8},
		{4, 1, 14,  8, 13,  6, 2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
		{15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
	 };

	private static final byte[][] s2 = {
			{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
			{3, 13,  4, 7, 15,  2,  8, 14, 12,  0, 1, 10,  6,  9, 11,  5},
			{0, 14, 7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15},
			{13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14,  9}
		 };
	
	private static final byte[][] s3 = {
			{10, 0, 9, 14, 6, 3, 15, 5,  1, 13, 12, 7, 11, 4, 2,  8},
			{13, 7, 0, 9, 3,  4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
			{13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14,  7},
			{1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
		 };
	
	private static final byte[][] s4 = {
			{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
			{13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14,  9},
			{10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
			{3, 15, 0, 6, 10, 1, 13, 8, 9,  4, 5, 11, 12, 7, 2, 14}
		 };
	
	private static final byte[][] s5 = {
			{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
			{14, 11, 2, 12,  4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
			{4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
			{11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
		  };
	
	private static final byte[][] s6 = {
			{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
			{10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
			{9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
			{4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
		  };
	
	private static final byte[][] s7 = {
			{4, 11, 2, 14, 15,  0, 8, 13 , 3, 12, 9 , 7,  5, 10, 6, 1},
			{13 , 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
			{1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
			{6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
		  };
	
	private static final byte[][] s8 = {
			{13, 2, 8,  4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
			{1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6 ,11, 0, 14, 9, 2},
			{7, 11, 4, 1, 9, 12, 14, 2,  0, 6, 10 ,13, 15, 3, 5, 8},
			{2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6 ,11}
		};
	
	private static final byte[][][] s = {s1, s2, s3, s4, s5, s6, s7, s8};
	
	private static final byte[] expandRight = // table useing to expanding each right block of text
	{
		32,  1,  2,  3,  4,  5,
		 4,  5,  6,  7,  8,  9, 
		 8,  9, 10, 11, 12, 13, 
		12, 13, 14, 15, 16, 17,
		16, 17, 18, 19, 20, 21, 
		20, 21, 22, 23, 24, 25, 
		24, 25, 26, 27, 28, 29, 
		28, 29, 30, 31, 32,  1
	};
		
	
	static byte[] finalPer_of_F = 
	{
		16,  7, 20, 21, 
		29, 12, 28, 17, 
		 1, 15, 23, 26, 
		 5, 18, 31, 10, 
		 2,  8, 24, 14, 
		32, 27,  3,  9, 
		19, 13, 30,  6, 
		22, 11,  4, 25
	};
	
	static byte[] IP = 
	{
	 58, 50, 42, 34, 26, 18, 10 , 2,
         60, 52, 44, 36, 28, 20, 12, 4,
         62, 54, 46, 38, 30, 22, 14, 6,
         64, 56, 48, 40, 32, 24, 16, 8,
         57, 49, 41, 33, 25, 17, 9, 1,
         59, 51, 43, 35, 27, 19, 11, 3,
         61, 53, 45, 37, 29, 21, 13, 5,
         63, 55, 47, 39, 31, 23, 15, 7
	};
	
	static byte[] FinalP = 
	{
		
                40, 8, 48, 16, 56, 24, 64, 32,
	        39, 7, 47, 15, 55, 23, 63, 31,
	        38, 6, 46, 14, 54, 22, 62, 30,
	        37, 5, 45, 13, 53, 21, 61, 29,
	        36, 4, 44, 12, 52, 20, 60, 28,
	        35, 3, 43 ,11, 51, 19, 59, 27,
	        34, 2, 42, 10, 50, 18, 58, 26,
	        33, 1, 41, 9, 49, 17, 57, 25
	};
        
        
        private static String binToUTFt(String bin) {
		
                // Convert back to String
		byte[] ciphertextBytes = new byte[bin.length()/8];
		String ciphertext = null;
		for(int j = 0; j < ciphertextBytes.length; j++) {
	        String temp = bin.substring(0, 8);
	        byte b = (byte) Integer.parseInt(temp, 2);
	        ciphertextBytes[j] = b;
	        bin = bin.substring(8);
	    }
		return ciphertext;//.trim();
	}
	
    void generatekey (String key){
        System.out.println("the key kok :"+key.length());
        String  key1 = permute(key ,PC1Keyto56);
        String prevleft = key1.substring(0, key1.length()/2);
        String prevright = key1.substring(key1.length()/2);
        //System.out.println("the sub key "+prevright.length());
        for (int i = 0; i < 16; i++) {
            
            String newleft = shift(prevleft,KEY_SHIFTS[i]);
            String newright = shift(prevright,KEY_SHIFTS[i]);
            prevleft = newleft;
            prevright = newright;
            String subKey = prevleft+prevright;
            subKey = permute(subKey, PC2Keyto48);
            //System.err.println(subKey);
            //System.out.println("key "+(i+1)+" = "+subKey);
            subkeys.add(subKey);
        }
    }
    
    public static String utfToBin(String utf) {
		
		// Convert to binary
		byte[] bytes = utf.getBytes();
		String bin = "";
		for (int i = 0; i < bytes.length; i++) {
		     int value = bytes[i];
		     for (int j = 0; j < 8; j++)
		     {
		        bin += ((value & 128) == 0 ? 0 : 1);
		        value <<= 1;
		     }
		}
		return bin;
    }
    private static String utfToBi(String utf) {
		
		// Convert to binary
		byte[] bytes = utf.getBytes();
		String bin = "";
		for (int i = 0; i < bytes.length; i++) {
		     int value = bytes[i];
		     for (int j = 0; j < 8; j++)
		     {
		        bin += ((value & 128) == 0 ? 0 : 1);
		        value <<= 1;
		     }
		}
		return bin;
    }
    
    
    
    public String cipher (String plaintext){
        
        StringBuilder line = new StringBuilder();      //input the message 
        for (int k = 0; k < plaintext.length(); k += 8) {
            String sub ="";
            sub = plaintext.substring(k, k+ 8);
        plaintext = utfToBin(sub);                     //convert it to binary
        System.out.println("result of cipher "+plaintext);
        plaintext = permute(plaintext, IP);             //initial permutation
        
        left = plaintext.substring(0, plaintext.length()/2);    //split the text into 2 parts 
        right = plaintext.substring(plaintext.length()/2);
        
        for (int i = 0; i <16 ; i++) {                          //16 round of des
            //System.out.println("this is key "+subkeys.get(i));
            mixer(subkeys.get(i));
          }
        String result = right + left;
        //System.out.println(result);
        String output = permute(result, FinalP);        //final permutation
        //System.out.println(output);
        
        String str = "";

        for (int i = 0; i < output.length()/8; i++) {       //convert the output to characters 
        int a = Integer.parseInt(output.substring(i*8,(i+1)*8),2);
        str += (char)(a);
        }
        //System.out.println(str);
        line.append(str);                                    //append characters to line builder 
        }
        return line.toString();
          
    }    
    // decryption of block of the text 
    public String encipher (String cipherText ){ 
         StringBuilder line = new StringBuilder();      //input the message 
        for (int k = 0; k < cipherText.length(); k += 8) {
            String sub ="";
            sub = cipherText.substring(k, k+ 8); 
        cipherText = utfToBi(sub);
        System.out.println("size of encipher "+cipherText.length());
        cipherText = permute(cipherText, IP);
        
        //split the text into 2 parts 
        left = cipherText.substring(0, cipherText.length()/2);
        right = cipherText.substring(cipherText.length()/2);
        
        for (int i = 15; i >= 0; i--) {
            mixer(subkeys.get(i));
        }
        String result = right + left;
        String output = permute(result, FinalP);
        String str = "";
        for (int i = 0; i < output.length()/8; i++) {
            int a = Integer.parseInt(output.substring(8*i,(i+1)*8),2);
            str += (char)(a);
        }
        System.out.println("eh? "+str);
        line.append(str);}
        return line.toString();
    }
 
        // apply any permutation in textblock or subkeys
    private String permute(String plain, byte[] table) {
        StringBuilder output = new StringBuilder();
        for (int index : table) {
             output.append(plain.charAt(index-1)); //index of value in table
         }
        return output.toString();
    }

    private String shift(String input, int round) {
        StringBuilder subString = new StringBuilder(input);
    for(int i=0;i<round;i++)
    {
        char letter = subString.charAt(0);
        subString.append(letter);
        subString.deleteCharAt(0);
    }
        //System.out.println("key shifted : "+subString.toString());
	return subString.toString();
    }

    private void split(String plaintext) {
    }
    
    private void mixer(String subkey) {
        right = expandDBox (right);
        right = Xor(right,subkey );
        right = SBox(right);
        right = permute(right, finalPer_of_F);
        right = Xor(right,left);
        //System.out.println("right after fun = "+right);
    }

    private String expandDBox(String right1) {
        String expanded = new String();
        right1 = permute(right, expandRight);
        for (int i : expandRight) {
            expanded += right1.charAt(i-1);
        }
        return expanded;
    }

    private String Xor(String x1, String x2) {
        StringBuilder output  =new StringBuilder();
        for(int i =0;i<x1.length();i++)
        {
            output.append(x1.charAt(i)^x2.charAt(i));
        }
        return output.toString();
    }

   
    private String SBox(String newright){
    StringBuilder builder = new StringBuilder(newright);
        for (int i = 0; i < 48; i += 6) {
            String sub ="";
                    sub = newright.substring(i, i + 6);
            char first = sub.charAt(0);
            char last = sub.charAt(5);
            int row = Integer.parseInt(""+first + last, 2);
            int coloumn = Integer.parseInt(sub.substring(1, 5), 2);
            int sbox_values = s[i / 6][row][coloumn];
            // convetr byte to int
            String result = Integer.toBinaryString(sbox_values);
            // append string to builder
            //System.out.println("this reddd : "+result);
             builder.append(result);
        }
        return builder.toString();
    }

 
 
 
 
